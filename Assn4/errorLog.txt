Starting parse
Entering state 0
Reading a token: Next token is token STATIC ()
Shifting token STATIC ()
Entering state 18
Reducing stack by rule 95 (line 310):
   $1 = token STATIC ()
-> $$ = nterm storage_class_specifier ()
Stack now 0
Entering state 26
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 26
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 26 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 26
Entering state 45
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 26
Entering state 46
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 25
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 25
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 25 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 25
Entering state 42
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 25 42 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 25 42 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 25 42 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 25 42 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 25 42 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 25 42 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 25 42 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 25 42 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 25 42 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 25 42 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 25 42 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 25 42 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 25 42 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 25 42 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 25 42 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 25 42 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 25 42 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 25 42 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 25
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 25
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 25
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 24
Reducing stack by rule 218 (line 666):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 34
Reducing stack by rule 215 (line 657):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 33
Reading a token: Next token is token ENUM ()
Shifting token ENUM ()
Entering state 14
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 36
Reading a token: Next token is token '{' ()
Reducing stack by rule 133 (line 402):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_opt ()
Stack now 0 33 14
Entering state 37
Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 74
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 415):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 33 14 37 54
Entering state 76
Reducing stack by rule 135 (line 407):
   $1 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 33 14 37 54
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 74
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 415):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 33 14 37 54 75 135
Entering state 235
Reducing stack by rule 136 (line 409):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 33 14 37 54
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 74
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 415):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 33 14 37 54 75 135
Entering state 235
Reducing stack by rule 136 (line 409):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 33 14 37 54
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 74
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 415):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 33 14 37 54 75 135
Entering state 235
Reducing stack by rule 136 (line 409):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 33 14 37 54
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 74
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 415):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 33 14 37 54 75 135
Entering state 235
Reducing stack by rule 136 (line 409):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 33 14 37 54
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 74
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 415):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 33 14 37 54 75 135
Entering state 235
Reducing stack by rule 136 (line 409):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 33 14 37 54
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 74
Reading a token: Next token is token '}' ()
Reducing stack by rule 137 (line 415):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 33 14 37 54 75 135
Entering state 235
Reducing stack by rule 136 (line 409):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 33 14 37 54
Entering state 75
Next token is token '}' ()
Shifting token '}' ()
Entering state 134
Reducing stack by rule 130 (line 393):
   $1 = token ENUM ()
   $2 = nterm identifier_opt ()
   $3 = token '{' ()
   $4 = nterm enumerator_list ()
   $5 = token '}' ()
-> $$ = nterm enum_specifier ()
Stack now 0 33
Entering state 30
Reducing stack by rule 110 (line 343):
   $1 = nterm enum_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 33
Entering state 27
Reading a token: Next token is token ';' ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33
Entering state 25
Next token is token ';' ()
Reducing stack by rule 83 (line 274):
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33
Entering state 24
Reducing stack by rule 218 (line 666):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 33
Entering state 53
Reducing stack by rule 216 (line 659):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 33
Reading a token: Next token is token EXTERN ()
Shifting token EXTERN ()
Entering state 22
Reducing stack by rule 94 (line 308):
   $1 = token EXTERN ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 33
Entering state 26
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 26
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 26 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 26
Entering state 45
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 26
Entering state 46
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33
Entering state 25
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25
Entering state 42
Next token is token ';' ()
Reducing stack by rule 92 (line 301):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33
Entering state 24
Reducing stack by rule 218 (line 666):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 33
Entering state 53
Reducing stack by rule 216 (line 659):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 33
Reading a token: Next token is token INLINE ()
Shifting token INLINE ()
Entering state 23
Reducing stack by rule 142 (line 432):
   $1 = token INLINE ()
-> $$ = nterm function_specifier ()
Stack now 0 33
Entering state 32
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 32
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 32 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 32
Entering state 45
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 32
Entering state 51
Reducing stack by rule 87 (line 284):
   $1 = nterm function_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33
Entering state 25
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 43
Entering state 67
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 120
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 43 67 120
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 43 67 120 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 43 67 120
Entering state 218
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 43 67 120 218
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 43 67 120 218 43
Entering state 67
Reading a token: Next token is token ',' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 43 67 120 218
Entering state 289
Reducing stack by rule 168 (line 509):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 33 25 43 67 120
Entering state 222
Reducing stack by rule 166 (line 502):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 33 25 43 67 120
Entering state 221
Next token is token ',' ()
Shifting token ',' ()
Entering state 292
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 43 67 120 221 292
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 43 67 120 221 292 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 43 67 120 221 292
Entering state 218
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 43 67 120 221 292 218
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 43 67 120 221 292 218 43
Entering state 67
Reading a token: Next token is token ')' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 43 67 120 221 292 218
Entering state 289
Reducing stack by rule 168 (line 509):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 33 25 43 67 120 221 292
Entering state 325
Reducing stack by rule 167 (line 504):
   $1 = nterm parameter_list ()
   $2 = token ',' ()
   $3 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 33 25 43 67 120
Entering state 221
Next token is token ')' ()
Reducing stack by rule 164 (line 495):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 33 25 43 67 120
Entering state 220
Next token is token ')' ()
Shifting token ')' ()
Entering state 291
Reducing stack by rule 152 (line 459):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 43
Entering state 67
Reading a token: Next token is token '{' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25
Entering state 42
Next token is token '{' ()
Reducing stack by rule 221 (line 677):
-> $$ = nterm declaration_list_opt ()
Stack now 0 33 25 42
Entering state 63
Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 192
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 99
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 100
Next token is token PLUS ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 103
Next token is token PLUS ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 104
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 175
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 192 104 175
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 192 104 175
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 192 104 175
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 192 104 175
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 192 104 175
Entering state 258
Next token is token ';' ()
Reducing stack by rule 40 (line 143):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 192
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 192
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 192
Entering state 275
Next token is token ';' ()
Shifting token ';' ()
Entering state 313
Reducing stack by rule 214 (line 652):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 33 25 42 63 116
Entering state 215
Reducing stack by rule 190 (line 578):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63
Entering state 117
Reducing stack by rule 219 (line 671):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm declaration_list_opt ()
   $4 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0 33
Entering state 35
Reducing stack by rule 217 (line 664):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0 33
Entering state 53
Reducing stack by rule 216 (line 659):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 33
Reading a token: Next token is token STRUCT ()
Shifting token STRUCT ()
Entering state 16
Reducing stack by rule 119 (line 368):
   $1 = token STRUCT ()
-> $$ = nterm struct_or_union ()
Stack now 0 33
Entering state 29
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 48
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 68
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 70 43
Entering state 67
Reading a token: Next token is token ',' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 70
Entering state 129
Next token is token ',' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 70
Entering state 127
Next token is token ',' ()
Shifting token ',' ()
Entering state 230
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 70 127 230
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 70 127 230 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 70 127 230
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 70 127 230
Entering state 299
Reducing stack by rule 126 (line 384):
   $1 = nterm struct_declarator_list ()
   $2 = token ',' ()
   $3 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68
Entering state 72
Reducing stack by rule 121 (line 373):
   $1 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 3
Reducing stack by rule 99 (line 321):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 227
Reducing stack by rule 117 (line 363):
   $1 = nterm struct_or_union ()
   $2 = token IDENTIFIER ()
   $3 = token '{' ()
   $4 = nterm struct_declaration_list ()
   $5 = token '}' ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 33
Entering state 28
Reducing stack by rule 111 (line 345):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 33
Entering state 27
Reading a token: Next token is token ';' ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33
Entering state 25
Next token is token ';' ()
Reducing stack by rule 83 (line 274):
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33
Entering state 24
Reducing stack by rule 218 (line 666):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 33
Entering state 53
Reducing stack by rule 216 (line 659):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 33
Reading a token: Next token is token UNION ()
Shifting token UNION ()
Entering state 15
Reducing stack by rule 120 (line 369):
   $1 = token UNION ()
-> $$ = nterm struct_or_union ()
Stack now 0 33
Entering state 29
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 48
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 68
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 2
Reducing stack by rule 100 (line 323):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68
Entering state 72
Reducing stack by rule 121 (line 373):
   $1 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token LONG ()
Shifting token LONG ()
Entering state 9
Reducing stack by rule 102 (line 327):
   $1 = token LONG ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token DOUBLE ()
Shifting token DOUBLE ()
Entering state 8
Reducing stack by rule 104 (line 331):
   $1 = token DOUBLE ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token _COMPLEX ()
Shifting token _COMPLEX ()
Entering state 6
Reducing stack by rule 108 (line 339):
   $1 = token _COMPLEX ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token _BOOL ()
Shifting token _BOOL ()
Entering state 4
Reducing stack by rule 107 (line 337):
   $1 = token _BOOL ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token _IMAGINARY ()
Shifting token _IMAGINARY ()
Entering state 5
Reducing stack by rule 109 (line 341):
   $1 = token _IMAGINARY ()
-> $$ = nterm type_specifier ()
Stack now 0 33 29 48 68 122
Entering state 69
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 115 (line 358):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 33 29 48 68 122 69
Entering state 124
Reducing stack by rule 112 (line 350):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 33 29 48 68 122
Entering state 70
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 29 48 68 122 70
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 29 48 68 122 70 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 129
Next token is token ';' ()
Reducing stack by rule 129 (line 389):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 33 29 48 68 122 70
Entering state 128
Reducing stack by rule 125 (line 383):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 33 29 48 68 122 70
Entering state 127
Next token is token ';' ()
Shifting token ';' ()
Entering state 231
Reducing stack by rule 124 (line 379):
   $1 = nterm specifier_qualifier_list ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 33 29 48 68 122
Entering state 131
Reducing stack by rule 122 (line 374):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 33 29 48 68
Entering state 122
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 227
Reducing stack by rule 117 (line 363):
   $1 = nterm struct_or_union ()
   $2 = token IDENTIFIER ()
   $3 = token '{' ()
   $4 = nterm struct_declaration_list ()
   $5 = token '}' ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 33
Entering state 28
Reducing stack by rule 111 (line 345):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 33
Entering state 27
Reading a token: Next token is token ';' ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33
Entering state 25
Next token is token ';' ()
Reducing stack by rule 83 (line 274):
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33
Entering state 24
Reducing stack by rule 218 (line 666):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 33
Entering state 53
Reducing stack by rule 216 (line 659):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 33
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33
Entering state 25
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 43
Entering state 67
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 120
Reading a token: Next token is token ')' ()
Reducing stack by rule 159 (line 477):
-> $$ = nterm identifier_list_opt ()
Stack now 0 33 25 43 67 120
Entering state 219
Next token is token ')' ()
Shifting token ')' ()
Entering state 290
Reducing stack by rule 153 (line 461):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm identifier_list_opt ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 43
Entering state 67
Reading a token: Next token is token '{' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25
Entering state 42
Next token is token '{' ()
Reducing stack by rule 221 (line 677):
-> $$ = nterm declaration_list_opt ()
Stack now 0 33 25 42
Entering state 63
Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 99
Reading a token: Next token is token MODULO ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 100
Next token is token MODULO ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 103
Next token is token MODULO ()
Shifting token MODULO ()
Entering state 174
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 62 80 60 103 174
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 62 80 60 103 174
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 62 80 60 103 174
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 62 80 60 103 174
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 62 80 60 103 174
Entering state 257
Reducing stack by rule 38 (line 135):
   $1 = nterm multiplicative_expression ()
   $2 = token MODULO ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token MOD_ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token MOD_ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token MOD_ASGN ()
Shifting token MOD_ASGN ()
Entering state 163
Reducing stack by rule 70 (line 237):
   $1 = token MOD_ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 99
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 100
Next token is token PLUS ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 103
Next token is token PLUS ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 175
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 99
Reading a token: Next token is token MULT ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 258
Next token is token MULT ()
Shifting token MULT ()
Entering state 172
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 172
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 172
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 172
Entering state 99
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 172
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 172
Entering state 255
Reducing stack by rule 36 (line 131):
   $1 = nterm multiplicative_expression ()
   $2 = token MULT ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 258
Next token is token PLUS ()
Reducing stack by rule 40 (line 143):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 175
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 99
Reading a token: Next token is token DIVIDE ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 258
Next token is token DIVIDE ()
Shifting token DIVIDE ()
Entering state 173
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 173
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 173
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 173
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 173
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175 258 173
Entering state 256
Reducing stack by rule 37 (line 133):
   $1 = nterm multiplicative_expression ()
   $2 = token DIVIDE ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 104 175
Entering state 258
Next token is token ';' ()
Reducing stack by rule 40 (line 143):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ';' ()
Reducing stack by rule 92 (line 301):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 3
Reducing stack by rule 99 (line 321):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ';' ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ';' ()
Reducing stack by rule 92 (line 301):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token CONST ()
Shifting token CONST ()
Entering state 17
Reducing stack by rule 139 (line 423):
   $1 = token CONST ()
-> $$ = nterm type_qualifier ()
Stack now 0 33 25 42 63 116 208
Entering state 31
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208 31
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 31 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208 31
Entering state 45
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 31
Entering state 50
Reducing stack by rule 86 (line 282):
   $1 = nterm type_qualifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token SWITCH ()
Shifting token SWITCH ()
Entering state 200
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 283
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 200 283
Entering state 321
Next token is token ')' ()
Shifting token ')' ()
Entering state 341
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 193
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 99
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 103
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 104
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 105
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 106
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 107
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 108
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 109
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 110
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 111
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 112
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 228
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193
Entering state 276
Next token is token ':' ()
Shifting token ':' ()
Entering state 314
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 99
Next token is token '(' ()
Shifting token '(' ()
Entering state 155
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 251
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 249
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314 99 155
Entering state 250
Next token is token ')' ()
Shifting token ')' ()
Entering state 310
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 193 276 314
Entering state 335
Reducing stack by rule 192 (line 585):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 206
Reducing stack by rule 185 (line 568):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 208
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 193
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 99
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 103
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 104
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 105
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 106
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 107
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 108
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 109
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 110
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 111
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 112
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 228
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 276
Next token is token ':' ()
Shifting token ':' ()
Entering state 314
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 99
Next token is token '(' ()
Shifting token '(' ()
Entering state 155
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 251
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 249
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 250
Next token is token ')' ()
Shifting token ')' ()
Entering state 310
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 335
Reducing stack by rule 192 (line 585):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 206
Reducing stack by rule 185 (line 568):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 208
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 193
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 99
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 103
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 104
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 105
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 106
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 107
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 108
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 109
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 110
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 111
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 112
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 228
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 276
Next token is token ':' ()
Shifting token ':' ()
Entering state 314
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 99
Next token is token '(' ()
Shifting token '(' ()
Entering state 155
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 251
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 249
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 99 155
Entering state 250
Next token is token ')' ()
Shifting token ')' ()
Entering state 310
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 335
Reducing stack by rule 192 (line 585):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 206
Reducing stack by rule 185 (line 568):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 208
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 193
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 99
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 103
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 104
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 105
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 106
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 107
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 108
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 109
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 110
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 111
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 112
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 228
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193
Entering state 276
Next token is token ':' ()
Shifting token ':' ()
Entering state 314
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 193
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 99
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 103
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 104
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 105
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 106
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 107
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 108
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 109
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 110
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 111
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 112
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 228
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193
Entering state 276
Next token is token ':' ()
Shifting token ':' ()
Entering state 314
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 99
Next token is token '(' ()
Shifting token '(' ()
Entering state 155
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 251
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 249
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314 99 155
Entering state 250
Next token is token ')' ()
Shifting token ')' ()
Entering state 310
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314 193 276 314
Entering state 335
Reducing stack by rule 192 (line 585):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 206
Reducing stack by rule 185 (line 568):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 193 276 314
Entering state 335
Reducing stack by rule 192 (line 585):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 206
Reducing stack by rule 185 (line 568):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 208
Reading a token: Next token is token BREAK ()
Shifting token BREAK ()
Entering state 191
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 274
Reducing stack by rule 213 (line 650):
   $1 = token BREAK ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 215
Reducing stack by rule 190 (line 578):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 208
Reading a token: Next token is token DEFAULT ()
Shifting token DEFAULT ()
Entering state 201
Reading a token: Next token is token ':' ()
Shifting token ':' ()
Entering state 284
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 99
Next token is token '(' ()
Shifting token '(' ()
Entering state 155
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 251
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 249
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284 99 155
Entering state 250
Next token is token ')' ()
Shifting token ')' ()
Entering state 310
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208 201 284
Entering state 322
Reducing stack by rule 193 (line 587):
   $1 = token DEFAULT ()
   $2 = token ':' ()
   $3 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 206
Reducing stack by rule 185 (line 568):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 200 283 321 341 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 200 283 321 341
Entering state 351
Reducing stack by rule 204 (line 625):
   $1 = token SWITCH ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 212
Reducing stack by rule 188 (line 574):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 121
Reading a token: Next token is token ']' ()
Reducing stack by rule 155 (line 467):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 33 25 42 63 116 208 62 43 67 121
Entering state 225
Next token is token ']' ()
Reducing stack by rule 157 (line 472):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 33 25 42 63 116 208 62 43 67 121 225
Entering state 297
Next token is token ']' ()
Shifting token ']' ()
Entering state 329
Reducing stack by rule 148 (line 451):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 148
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 245
Reducing stack by rule 176 (line 537):
   $1 = nterm designation_opt ()
   $2 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token ',' ()
Shifting token ',' ()
Entering state 244
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244
Entering state 308
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 332
Reducing stack by rule 177 (line 539):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token ',' ()
Shifting token ',' ()
Entering state 244
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244
Entering state 308
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 332
Reducing stack by rule 177 (line 539):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token ',' ()
Shifting token ',' ()
Entering state 244
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244
Entering state 308
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 99
Reading a token: Next token is token '}' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 100
Next token is token '}' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 103
Next token is token '}' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 104
Next token is token '}' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 105
Next token is token '}' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 106
Next token is token '}' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 107
Next token is token '}' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 108
Next token is token '}' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 109
Next token is token '}' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 110
Next token is token '}' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 111
Next token is token '}' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 112
Next token is token '}' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 332
Reducing stack by rule 177 (line 539):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token '}' ()
Shifting token '}' ()
Entering state 243
Reducing stack by rule 174 (line 530):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Reading a token: Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 194
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 277
Reading a token: Next token is token AUTO ()
Shifting token AUTO ()
Entering state 12
Reducing stack by rule 96 (line 312):
   $1 = token AUTO ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 26
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 194 277 26
Entering state 46
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 315
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 99
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 100
Next token is token LT ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 103
Next token is token LT ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 104
Next token is token LT ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 105
Next token is token LT ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 106
Next token is token LT ()
Shifting token LT ()
Entering state 179
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 262
Next token is token ';' ()
Reducing stack by rule 46 (line 161):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 336
Next token is token ';' ()
Shifting token ';' ()
Entering state 346
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 99
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 153
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 203
Next token is token ')' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 353
Next token is token ')' ()
Shifting token ')' ()
Entering state 357
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 198
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 281
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 99
Reading a token: Next token is token MODULO ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 100
Next token is token MODULO ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 103
Next token is token MODULO ()
Shifting token MODULO ()
Entering state 174
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 103 174
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 103 174
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 103 174
Entering state 99
Reading a token: Next token is token EQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 103 174
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 103 174
Entering state 257
Reducing stack by rule 38 (line 135):
   $1 = nterm multiplicative_expression ()
   $2 = token MODULO ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 103
Next token is token EQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 104
Next token is token EQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 105
Next token is token EQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 106
Next token is token EQ ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 107
Next token is token EQ ()
Shifting token EQ ()
Entering state 183
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 107 183
Entering state 266
Next token is token ')' ()
Reducing stack by rule 51 (line 174):
   $1 = nterm equality_expression ()
   $2 = token EQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 319
Next token is token ')' ()
Shifting token ')' ()
Entering state 339
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token CONTINUE ()
Shifting token CONTINUE ()
Entering state 197
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 280
Reducing stack by rule 212 (line 648):
   $1 = token CONTINUE ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 116
Entering state 215
Reducing stack by rule 190 (line 578):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 349
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 355
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token INCREMENT ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 99
Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 153
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 349 355
Entering state 359
Reducing stack by rule 203 (line 623):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 212
Reducing stack by rule 188 (line 574):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357
Entering state 361
Reducing stack by rule 208 (line 636):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm declaration ()
   $4 = nterm expression_opt ()
   $5 = token ';' ()
   $6 = nterm expression_opt ()
   $7 = token ')' ()
   $8 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 213
Reducing stack by rule 189 (line 576):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token '(' ()
Shifting token '(' ()
Entering state 155
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 251
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 249
Next token is token ',' ()
Shifting token ',' ()
Entering state 309
Reading a token: Next token is token SIZEOF ()
Shifting token SIZEOF ()
Entering state 81
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 136
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81 136
Entering state 142
Next token is token ')' ()
Shifting token ')' ()
Entering state 238
Reducing stack by rule 7 (line 52):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309 81
Entering state 137
Reducing stack by rule 25 (line 99):
   $1 = token SIZEOF ()
   $2 = nterm unary_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 99 155 249 309
Entering state 333
Reducing stack by rule 18 (line 81):
   $1 = nterm argument_expression_list ()
   $2 = token ',' ()
   $3 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 249
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 33 25 42 63 116 208 99 155
Entering state 250
Next token is token ')' ()
Shifting token ')' ()
Entering state 310
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 121
Reading a token: Next token is token ']' ()
Reducing stack by rule 155 (line 467):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 33 25 42 63 116 208 62 43 67 121
Entering state 225
Next token is token ']' ()
Reducing stack by rule 157 (line 472):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 33 25 42 63 116 208 62 43 67 121 225
Entering state 297
Next token is token ']' ()
Shifting token ']' ()
Entering state 329
Reducing stack by rule 148 (line 451):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token FLOAT_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 148
Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 148
Entering state 245
Reducing stack by rule 176 (line 537):
   $1 = nterm designation_opt ()
   $2 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token ',' ()
Shifting token ',' ()
Entering state 244
Reading a token: Next token is token MINUS ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244
Entering state 308
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 88
Reducing stack by rule 30 (line 113):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 101
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308 101
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308 101
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308 101
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308 101
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308 101
Entering state 171
Reducing stack by rule 24 (line 97):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 332
Reducing stack by rule 177 (line 539):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token ',' ()
Shifting token ',' ()
Entering state 244
Reading a token: Next token is token FLOAT_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244
Entering state 308
Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 332
Reducing stack by rule 177 (line 539):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token ',' ()
Shifting token ',' ()
Entering state 244
Reading a token: Next token is token FLOAT_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244
Entering state 308
Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 99
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 100
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 103
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 104
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 105
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 106
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 107
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 108
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 109
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 110
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 111
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 112
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 332
Reducing stack by rule 177 (line 539):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token ',' ()
Shifting token ',' ()
Entering state 244
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 179 (line 545):
-> $$ = nterm designation_opt ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244
Entering state 308
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 99
Reading a token: Next token is token '}' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 100
Next token is token '}' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 103
Next token is token '}' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 104
Next token is token '}' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 105
Next token is token '}' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 106
Next token is token '}' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 107
Next token is token '}' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 108
Next token is token '}' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 109
Next token is token '}' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 110
Next token is token '}' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 111
Next token is token '}' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 112
Next token is token '}' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60 96 147 244 308
Entering state 332
Reducing stack by rule 177 (line 539):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 33 25 42 63 116 208 62 80 60 96
Entering state 147
Next token is token '}' ()
Shifting token '}' ()
Entering state 243
Reducing stack by rule 174 (line 530):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Reading a token: Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 194
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 277
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 194 277 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 315
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 99
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 100
Next token is token LT ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 103
Next token is token LT ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 104
Next token is token LT ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 105
Next token is token LT ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 106
Next token is token LT ()
Shifting token LT ()
Entering state 179
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 106 179
Entering state 262
Next token is token ';' ()
Reducing stack by rule 46 (line 161):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 336
Next token is token ';' ()
Shifting token ';' ()
Entering state 346
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 99
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 153
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 203
Next token is token ')' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 353
Next token is token ')' ()
Shifting token ')' ()
Entering state 357
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token ADD_ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 99
Next token is token ADD_ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 100
Next token is token ADD_ASGN ()
Shifting token ADD_ASGN ()
Entering state 159
Reducing stack by rule 71 (line 239):
   $1 = token ADD_ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100
Entering state 169
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357
Entering state 361
Reducing stack by rule 208 (line 636):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm declaration ()
   $4 = nterm expression_opt ()
   $5 = token ';' ()
   $6 = nterm expression_opt ()
   $7 = token ')' ()
   $8 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 213
Reducing stack by rule 189 (line 576):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token STATIC ()
Shifting token STATIC ()
Entering state 18
Reducing stack by rule 95 (line 310):
   $1 = token STATIC ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 26
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 3
Reducing stack by rule 99 (line 321):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208 26
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 26 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208 26
Entering state 45
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 26
Entering state 46
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 121
Reading a token: Next token is token ']' ()
Reducing stack by rule 155 (line 467):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 33 25 42 63 116 208 62 43 67 121
Entering state 225
Next token is token ']' ()
Reducing stack by rule 157 (line 472):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 33 25 42 63 116 208 62 43 67 121 225
Entering state 297
Next token is token ']' ()
Shifting token ']' ()
Entering state 329
Reducing stack by rule 148 (line 451):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 194
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 277
Reading a token: Next token is token REGISTER ()
Shifting token REGISTER ()
Entering state 19
Reducing stack by rule 97 (line 314):
   $1 = token REGISTER ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 26
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208 194 277 26
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 194 277 26 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208 194 277 26
Entering state 45
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 194 277 26
Entering state 46
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 194 277 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208 194 277
Entering state 315
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 99
Reading a token: Next token is token NEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 100
Next token is token NEQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 103
Next token is token NEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 104
Next token is token NEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 105
Next token is token NEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 106
Next token is token NEQ ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 107
Next token is token NEQ ()
Shifting token NEQ ()
Entering state 184
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 107 184
Entering state 267
Next token is token ';' ()
Reducing stack by rule 52 (line 176):
   $1 = nterm equality_expression ()
   $2 = token NEQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315
Entering state 336
Next token is token ';' ()
Shifting token ';' ()
Entering state 346
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 99
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 153
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 203
Next token is token ')' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346
Entering state 353
Next token is token ')' ()
Shifting token ')' ()
Entering state 357
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 198
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 281
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 99
Reading a token: Next token is token LEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 100
Next token is token LEQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 103
Next token is token LEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 104
Next token is token LEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 105
Next token is token LEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 106
Next token is token LEQ ()
Shifting token LEQ ()
Entering state 181
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 99
Reading a token: Next token is token LOGICAL_AND ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 103
Next token is token LOGICAL_AND ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 104
Next token is token LOGICAL_AND ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 106 181
Entering state 264
Next token is token LOGICAL_AND ()
Reducing stack by rule 48 (line 165):
   $1 = nterm relational_expression ()
   $2 = token LEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 106
Next token is token LOGICAL_AND ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 107
Next token is token LOGICAL_AND ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 108
Next token is token LOGICAL_AND ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 109
Next token is token LOGICAL_AND ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 110
Next token is token LOGICAL_AND ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 111
Next token is token LOGICAL_AND ()
Shifting token LOGICAL_AND ()
Entering state 188
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 99
Reading a token: Next token is token GEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 103
Next token is token GEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 104
Next token is token GEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 105
Next token is token GEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 106
Next token is token GEQ ()
Shifting token GEQ ()
Entering state 182
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188 106 182
Entering state 265
Next token is token ')' ()
Reducing stack by rule 49 (line 167):
   $1 = nterm relational_expression ()
   $2 = token GEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 111 188
Entering state 271
Next token is token ')' ()
Reducing stack by rule 60 (line 204):
   $1 = nterm logical_AND_expression ()
   $2 = token LOGICAL_AND ()
   $3 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281
Entering state 319
Next token is token ')' ()
Shifting token ')' ()
Entering state 339
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '[' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 99
Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 99
Reading a token: Next token is token SUB_ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 100
Next token is token SUB_ASGN ()
Shifting token SUB_ASGN ()
Entering state 160
Reducing stack by rule 72 (line 241):
   $1 = token SUB_ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100
Entering state 169
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116 198 281 319 339
Entering state 349
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 621):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 212
Reducing stack by rule 188 (line 574):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 208
Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 194 277 315 336 346 353 357
Entering state 361
Reducing stack by rule 208 (line 636):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm declaration ()
   $4 = nterm expression_opt ()
   $5 = token ';' ()
   $6 = nterm expression_opt ()
   $7 = token ')' ()
   $8 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 213
Reducing stack by rule 189 (line 576):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token REGISTER ()
Shifting token REGISTER ()
Entering state 19
Reducing stack by rule 97 (line 314):
   $1 = token REGISTER ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 26
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208 26
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 26 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208 26
Entering state 45
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 26
Entering state 46
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 195
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 278
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 100
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278
Entering state 317
Next token is token ')' ()
Shifting token ')' ()
Entering state 338
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 198
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 281
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 99
Reading a token: Next token is token EQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 100
Next token is token EQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 103
Next token is token EQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 104
Next token is token EQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 105
Next token is token EQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 106
Next token is token EQ ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 107
Next token is token EQ ()
Shifting token EQ ()
Entering state 183
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 105
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 107 183
Entering state 266
Next token is token ')' ()
Reducing stack by rule 51 (line 174):
   $1 = nterm equality_expression ()
   $2 = token EQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 110
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281
Entering state 319
Next token is token ')' ()
Shifting token ')' ()
Entering state 339
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 116
Reading a token: Next token is token BREAK ()
Shifting token BREAK ()
Entering state 191
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 274
Reducing stack by rule 213 (line 650):
   $1 = token BREAK ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 116
Entering state 215
Reducing stack by rule 190 (line 578):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339
Entering state 349
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 355
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 198
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 281
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 99
Reading a token: Next token is token LEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 100
Next token is token LEQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 103
Next token is token LEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 104
Next token is token LEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 105
Next token is token LEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 106
Next token is token LEQ ()
Shifting token LEQ ()
Entering state 181
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 99
Reading a token: Next token is token LOGICAL_AND ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 103
Next token is token LOGICAL_AND ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 104
Next token is token LOGICAL_AND ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 106 181
Entering state 264
Next token is token LOGICAL_AND ()
Reducing stack by rule 48 (line 165):
   $1 = nterm relational_expression ()
   $2 = token LEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 106
Next token is token LOGICAL_AND ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 107
Next token is token LOGICAL_AND ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 108
Next token is token LOGICAL_AND ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 109
Next token is token LOGICAL_AND ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 110
Next token is token LOGICAL_AND ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 111
Next token is token LOGICAL_AND ()
Shifting token LOGICAL_AND ()
Entering state 188
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 99
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 99
Reading a token: Next token is token GEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 103
Next token is token GEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 104
Next token is token GEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 105
Next token is token GEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 106
Next token is token GEQ ()
Shifting token GEQ ()
Entering state 182
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 99
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 170
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 103
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 104
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188 106 182
Entering state 265
Next token is token ')' ()
Reducing stack by rule 49 (line 167):
   $1 = nterm relational_expression ()
   $2 = token GEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 106
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 107
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 108
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 109
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 111 188
Entering state 271
Next token is token ')' ()
Reducing stack by rule 60 (line 204):
   $1 = nterm logical_AND_expression ()
   $2 = token LOGICAL_AND ()
   $3 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 111
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 112
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281
Entering state 319
Next token is token ')' ()
Shifting token ')' ()
Entering state 339
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '[' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 99
Next token is token '[' ()
Shifting token '[' ()
Entering state 156
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 99
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 100
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 103
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 104
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 105
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 106
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 107
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 108
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 109
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 110
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 111
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 112
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 99 156
Entering state 252
Next token is token ']' ()
Shifting token ']' ()
Entering state 311
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 99
Reading a token: Next token is token ADD_ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 100
Next token is token ADD_ASGN ()
Shifting token ADD_ASGN ()
Entering state 159
Reducing stack by rule 71 (line 239):
   $1 = token ADD_ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100
Entering state 169
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355 198 281 319 339
Entering state 349
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 202 (line 621):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355
Entering state 212
Reducing stack by rule 188 (line 574):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 198 281 319 339 349 355
Entering state 359
Reducing stack by rule 203 (line 623):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116
Entering state 212
Reducing stack by rule 188 (line 574):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116
Entering state 210
Reducing stack by rule 195 (line 597):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116
Entering state 208
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token INCREMENT ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 99
Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 153
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116 208 195 278 317 338 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338
Entering state 207
Reducing stack by rule 186 (line 570):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 195 278 317 338
Entering state 348
Reducing stack by rule 205 (line 630):
   $1 = token WHILE ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 213
Reducing stack by rule 189 (line 576):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token GOTO ()
Shifting token GOTO ()
Entering state 196
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 279
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 318
Reducing stack by rule 211 (line 646):
   $1 = token GOTO ()
   $2 = token IDENTIFIER ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 215
Reducing stack by rule 190 (line 578):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 3
Reducing stack by rule 99 (line 321):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 33 25 42 63 116 208
Entering state 27
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 33 25 42 63 116 208 27
Entering state 47
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 33 25 42 63 116 208
Entering state 62
Next token is token IDENTIFIER ()
Reducing stack by rule 145 (line 443):
-> $$ = nterm pointer_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 43
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 146 (line 447):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 33 25 42 63 116 208 62 43
Entering state 67
Reading a token: Next token is token ASGN ()
Reducing stack by rule 143 (line 437):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 80
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 60
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 84
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 114
Reducing stack by rule 173 (line 528):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 33 25 42 63 116 208 62 80 60
Entering state 115
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 33 25 42 63 116 208 62
Entering state 41
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 33 25 42 63 116 208 62
Entering state 40
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 33 25 42 63 116 208 62
Entering state 39
Next token is token ';' ()
Shifting token ';' ()
Entering state 58
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 33 25 42 63 116 208
Entering state 204
Reducing stack by rule 199 (line 609):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token ':' ()
Shifting token ':' ()
Entering state 285
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 99
Next token is token '.' ()
Shifting token '.' ()
Entering state 157
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 253
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 99
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 202 285 100
Entering state 169
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 202 285 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208 202 285
Entering state 323
Reducing stack by rule 191 (line 583):
   $1 = token IDENTIFIER ()
   $2 = token ':' ()
   $3 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 206
Reducing stack by rule 185 (line 568):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token '.' ()
Shifting token '.' ()
Entering state 157
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 253
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token '.' ()
Shifting token '.' ()
Entering state 157
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 253
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token '.' ()
Shifting token '.' ()
Entering state 157
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 253
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 86
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token '.' ()
Shifting token '.' ()
Entering state 157
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 253
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 202
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Next token is token '.' ()
Shifting token '.' ()
Entering state 157
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 253
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 99
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 100
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 158
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 33 25 42 63 116 208 100
Entering state 169
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 85
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 100 169
Entering state 254
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208
Entering state 214
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 201 (line 616):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 211
Reducing stack by rule 187 (line 572):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 192
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 83
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 33 25 42 63 116 208 192
Entering state 97
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 98
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 99
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 100
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 102
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 103
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 104
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 105
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 106
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 107
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 108
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 109
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 110
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 111
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 112
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 113
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 141
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 33 25 42 63 116 208 192
Entering state 203
Next token is token ';' ()
Reducing stack by rule 209 (line 641):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 33 25 42 63 116 208 192
Entering state 275
Next token is token ';' ()
Shifting token ';' ()
Entering state 313
Reducing stack by rule 214 (line 652):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 33 25 42 63 116 208
Entering state 215
Reducing stack by rule 190 (line 578):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 33 25 42 63 116 208
Entering state 205
Reducing stack by rule 200 (line 611):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 33 25 42 63 116 208
Entering state 286
Reducing stack by rule 196 (line 599):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 33 25 42 63 116
Entering state 208
Reading a token: Next token is token '}' ()
Reducing stack by rule 197 (line 604):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 33 25 42 63 116
Entering state 209
Next token is token '}' ()
Shifting token '}' ()
Entering state 287
Reducing stack by rule 194 (line 592):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 33 25 42 63
Entering state 117
Reducing stack by rule 219 (line 671):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm declaration_list_opt ()
   $4 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0 33
Entering state 35
Reducing stack by rule 217 (line 664):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0 33
Entering state 53
Reducing stack by rule 216 (line 659):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 33
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 52
Stack now 0 33 52
Cleanup: popping token $end ()
Cleanup: popping nterm translation_unit ()

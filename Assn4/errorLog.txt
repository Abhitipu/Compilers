Starting parse
Entering state 0
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 23
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 23
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 23
Entering state 38
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 23 38 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 23 38 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 23
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 23
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 23
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 22
Reducing stack by rule 203 (line 633):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 30
Reducing stack by rule 200 (line 624):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Next token is token ENUM ()
Shifting token ENUM ()
Entering state 14
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 32
Reading a token: Next token is token '{' ()
Reducing stack by rule 118 (line 369):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_opt ()
Stack now 0 29 14
Entering state 33
Next token is token '{' ()
Shifting token '{' ()
Entering state 48
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token ',' ()
Reducing stack by rule 122 (line 382):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 14 33 48
Entering state 64
Reducing stack by rule 120 (line 374):
   $1 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 14 33 48
Entering state 63
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token ',' ()
Reducing stack by rule 122 (line 382):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 14 33 48 63 112
Entering state 209
Reducing stack by rule 121 (line 376):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 14 33 48
Entering state 63
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token ',' ()
Reducing stack by rule 122 (line 382):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 14 33 48 63 112
Entering state 209
Reducing stack by rule 121 (line 376):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 14 33 48
Entering state 63
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token ',' ()
Reducing stack by rule 122 (line 382):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 14 33 48 63 112
Entering state 209
Reducing stack by rule 121 (line 376):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 14 33 48
Entering state 63
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token ',' ()
Reducing stack by rule 122 (line 382):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 14 33 48 63 112
Entering state 209
Reducing stack by rule 121 (line 376):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 14 33 48
Entering state 63
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token ',' ()
Reducing stack by rule 122 (line 382):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 14 33 48 63 112
Entering state 209
Reducing stack by rule 121 (line 376):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 14 33 48
Entering state 63
Next token is token ',' ()
Shifting token ',' ()
Entering state 112
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token '}' ()
Reducing stack by rule 122 (line 382):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 14 33 48 63 112
Entering state 209
Reducing stack by rule 121 (line 376):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 14 33 48
Entering state 63
Next token is token '}' ()
Shifting token '}' ()
Entering state 111
Reducing stack by rule 115 (line 360):
   $1 = token ENUM ()
   $2 = nterm identifier_opt ()
   $3 = token '{' ()
   $4 = nterm enumerator_list ()
   $5 = token '}' ()
-> $$ = nterm enum_specifier ()
Stack now 0 29
Entering state 26
Reducing stack by rule 110 (line 343):
   $1 = nterm enum_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 29
Entering state 25
Reading a token: Next token is token ';' ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29
Entering state 23
Next token is token ';' ()
Reducing stack by rule 83 (line 274):
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29
Entering state 22
Reducing stack by rule 203 (line 633):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 29
Entering state 47
Reducing stack by rule 201 (line 626):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Next token is token EXTERN ()
Shifting token EXTERN ()
Entering state 20
Reducing stack by rule 94 (line 308):
   $1 = token EXTERN ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29
Entering state 24
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 24
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 24 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 24
Entering state 41
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 24
Entering state 42
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29
Entering state 23
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23
Entering state 38
Next token is token ';' ()
Reducing stack by rule 92 (line 301):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29
Entering state 22
Reducing stack by rule 203 (line 633):
   $1 = nterm declaration ()
-> $$ = nterm external_declaration ()
Stack now 0 29
Entering state 47
Reducing stack by rule 201 (line 626):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Next token is token INLINE ()
Shifting token INLINE ()
Entering state 21
Reducing stack by rule 127 (line 399):
   $1 = token INLINE ()
-> $$ = nterm function_specifier ()
Stack now 0 29
Entering state 28
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 28
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 28 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 28
Entering state 41
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 28
Entering state 45
Reducing stack by rule 87 (line 284):
   $1 = nterm function_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29
Entering state 23
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 108
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 39 61 108
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 39 61 108 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 39 61 108
Entering state 197
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 39 61 108 197
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39 61 108 197 39
Entering state 61
Reading a token: Next token is token ',' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 39 61 108 197
Entering state 266
Reducing stack by rule 153 (line 476):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 29 23 39 61 108
Entering state 201
Reducing stack by rule 151 (line 469):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 29 23 39 61 108
Entering state 200
Next token is token ',' ()
Shifting token ',' ()
Entering state 269
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 39 61 108 200 269
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 39 61 108 200 269 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 39 61 108 200 269
Entering state 197
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 39 61 108 200 269 197
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39 61 108 200 269 197 39
Entering state 61
Reading a token: Next token is token ')' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 39 61 108 200 269 197
Entering state 266
Reducing stack by rule 153 (line 476):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 29 23 39 61 108 200 269
Entering state 300
Reducing stack by rule 152 (line 471):
   $1 = nterm parameter_list ()
   $2 = token ',' ()
   $3 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 29 23 39 61 108
Entering state 200
Next token is token ')' ()
Reducing stack by rule 149 (line 462):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 29 23 39 61 108
Entering state 199
Next token is token ')' ()
Shifting token ')' ()
Entering state 268
Reducing stack by rule 137 (line 426):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '{' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23
Entering state 38
Next token is token '{' ()
Reducing stack by rule 206 (line 644):
-> $$ = nterm declaration_list_opt ()
Stack now 0 29 23 38
Entering state 57
Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 171
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 87
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 88
Next token is token PLUS ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 91
Next token is token PLUS ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 92
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 154
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 171 92 154
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 171 92 154
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 171 92 154
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 171 92 154
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 171 92 154
Entering state 235
Next token is token ';' ()
Reducing stack by rule 40 (line 143):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 171
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 171
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 171
Entering state 252
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 199 (line 619):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 57 104
Entering state 194
Reducing stack by rule 175 (line 545):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57
Entering state 105
Reducing stack by rule 204 (line 638):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm declaration_list_opt ()
   $4 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0 29
Entering state 31
Reducing stack by rule 202 (line 631):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0 29
Entering state 47
Reducing stack by rule 201 (line 626):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29
Entering state 23
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 108
Reading a token: Next token is token ')' ()
Reducing stack by rule 144 (line 444):
-> $$ = nterm identifier_list_opt ()
Stack now 0 29 23 39 61 108
Entering state 198
Next token is token ')' ()
Shifting token ')' ()
Entering state 267
Reducing stack by rule 138 (line 428):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm identifier_list_opt ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '{' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23
Entering state 38
Next token is token '{' ()
Reducing stack by rule 206 (line 644):
-> $$ = nterm declaration_list_opt ()
Stack now 0 29 23 38
Entering state 57
Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 92 (line 301):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 87
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 88
Next token is token PLUS ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 91
Next token is token PLUS ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 154
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 87
Reading a token: Next token is token MULT ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 235
Next token is token MULT ()
Shifting token MULT ()
Entering state 151
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 151
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 151
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 151
Entering state 87
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 151
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 151
Entering state 232
Reducing stack by rule 36 (line 131):
   $1 = nterm multiplicative_expression ()
   $2 = token MULT ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 235
Next token is token PLUS ()
Reducing stack by rule 40 (line 143):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 154
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 87
Reading a token: Next token is token DIVIDE ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 235
Next token is token DIVIDE ()
Shifting token DIVIDE ()
Entering state 152
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 152
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 152
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 152
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 152
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154 235 152
Entering state 233
Reducing stack by rule 37 (line 133):
   $1 = nterm multiplicative_expression ()
   $2 = token DIVIDE ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 92 154
Entering state 235
Next token is token ';' ()
Reducing stack by rule 40 (line 143):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 92 (line 301):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 3
Reducing stack by rule 99 (line 321):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 92 (line 301):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token CONST ()
Shifting token CONST ()
Entering state 15
Reducing stack by rule 124 (line 390):
   $1 = token CONST ()
-> $$ = nterm type_qualifier ()
Stack now 0 29 23 38 57 104 187
Entering state 27
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187 27
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 27 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187 27
Entering state 41
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 27
Entering state 44
Reducing stack by rule 86 (line 282):
   $1 = nterm type_qualifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token SWITCH ()
Shifting token SWITCH ()
Entering state 179
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 260
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 179 260
Entering state 296
Next token is token ')' ()
Shifting token ')' ()
Entering state 316
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 172
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 87
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 91
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 92
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 93
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 94
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 95
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 96
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 97
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 98
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 99
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 100
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 206
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172
Entering state 253
Next token is token ':' ()
Shifting token ':' ()
Entering state 289
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 87
Next token is token '(' ()
Shifting token '(' ()
Entering state 134
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 228
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 226
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289 87 134
Entering state 227
Next token is token ')' ()
Shifting token ')' ()
Entering state 285
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 172 253 289
Entering state 310
Reducing stack by rule 177 (line 552):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 185
Reducing stack by rule 170 (line 535):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 187
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 172
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 87
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 91
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 92
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 93
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 94
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 95
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 96
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 97
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 98
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 99
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 100
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 206
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 253
Next token is token ':' ()
Shifting token ':' ()
Entering state 289
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 87
Next token is token '(' ()
Shifting token '(' ()
Entering state 134
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 228
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 226
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 227
Next token is token ')' ()
Shifting token ')' ()
Entering state 285
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 310
Reducing stack by rule 177 (line 552):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 185
Reducing stack by rule 170 (line 535):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 187
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 172
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 87
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 91
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 92
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 93
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 94
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 95
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 96
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 97
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 98
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 99
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 100
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 206
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 253
Next token is token ':' ()
Shifting token ':' ()
Entering state 289
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 87
Next token is token '(' ()
Shifting token '(' ()
Entering state 134
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 228
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 226
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 87 134
Entering state 227
Next token is token ')' ()
Shifting token ')' ()
Entering state 285
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 310
Reducing stack by rule 177 (line 552):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 185
Reducing stack by rule 170 (line 535):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 187
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 172
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 87
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 91
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 92
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 93
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 94
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 95
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 96
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 97
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 98
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 99
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 100
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 206
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172
Entering state 253
Next token is token ':' ()
Shifting token ':' ()
Entering state 289
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 172
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 87
Reading a token: Next token is token ':' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 91
Next token is token ':' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 92
Next token is token ':' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 93
Next token is token ':' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 94
Next token is token ':' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 95
Next token is token ':' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 96
Next token is token ':' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 97
Next token is token ':' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 98
Next token is token ':' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 99
Next token is token ':' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 100
Next token is token ':' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 206
Reducing stack by rule 80 (line 263):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172
Entering state 253
Next token is token ':' ()
Shifting token ':' ()
Entering state 289
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 87
Next token is token '(' ()
Shifting token '(' ()
Entering state 134
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 228
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 226
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289 87 134
Entering state 227
Next token is token ')' ()
Shifting token ')' ()
Entering state 285
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289 172 253 289
Entering state 310
Reducing stack by rule 177 (line 552):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 185
Reducing stack by rule 170 (line 535):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 172 253 289
Entering state 310
Reducing stack by rule 177 (line 552):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 185
Reducing stack by rule 170 (line 535):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 187
Reading a token: Next token is token BREAK ()
Shifting token BREAK ()
Entering state 170
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 251
Reducing stack by rule 198 (line 617):
   $1 = token BREAK ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 194
Reducing stack by rule 175 (line 545):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 187
Reading a token: Next token is token DEFAULT ()
Shifting token DEFAULT ()
Entering state 180
Reading a token: Next token is token ':' ()
Shifting token ':' ()
Entering state 261
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 87
Next token is token '(' ()
Shifting token '(' ()
Entering state 134
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 228
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 226
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261 87 134
Entering state 227
Next token is token ')' ()
Shifting token ')' ()
Entering state 285
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187 180 261
Entering state 297
Reducing stack by rule 178 (line 554):
   $1 = token DEFAULT ()
   $2 = token ':' ()
   $3 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 185
Reducing stack by rule 170 (line 535):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 179 260 296 316 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 179 260 296 316
Entering state 326
Reducing stack by rule 189 (line 592):
   $1 = token SWITCH ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 191
Reducing stack by rule 173 (line 541):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 109
Reading a token: Next token is token ']' ()
Reducing stack by rule 140 (line 434):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 57 104 187 56 39 61 109
Entering state 204
Next token is token ']' ()
Reducing stack by rule 142 (line 439):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 29 23 38 57 104 187 56 39 61 109 204
Entering state 274
Next token is token ']' ()
Shifting token ']' ()
Entering state 304
Reducing stack by rule 133 (line 418):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 84
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 127
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 222
Reducing stack by rule 161 (line 504):
   $1 = nterm designation_opt ()
   $2 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token ',' ()
Shifting token ',' ()
Entering state 221
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221
Entering state 283
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 307
Reducing stack by rule 162 (line 506):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token ',' ()
Shifting token ',' ()
Entering state 221
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221
Entering state 283
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 307
Reducing stack by rule 162 (line 506):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token ',' ()
Shifting token ',' ()
Entering state 221
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221
Entering state 283
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 87
Reading a token: Next token is token '}' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 88
Next token is token '}' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 91
Next token is token '}' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 92
Next token is token '}' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 93
Next token is token '}' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 94
Next token is token '}' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 95
Next token is token '}' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 96
Next token is token '}' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 97
Next token is token '}' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 98
Next token is token '}' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 99
Next token is token '}' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 100
Next token is token '}' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 307
Reducing stack by rule 162 (line 506):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token '}' ()
Shifting token '}' ()
Entering state 220
Reducing stack by rule 159 (line 497):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Reading a token: Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 173
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 254
Reading a token: Next token is token AUTO ()
Shifting token AUTO ()
Entering state 12
Reducing stack by rule 96 (line 312):
   $1 = token AUTO ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 24
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 173 254 24
Entering state 42
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 87
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 88
Next token is token LT ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 91
Next token is token LT ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 92
Next token is token LT ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 93
Next token is token LT ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 94
Next token is token LT ()
Shifting token LT ()
Entering state 158
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 239
Next token is token ';' ()
Reducing stack by rule 46 (line 161):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 311
Next token is token ';' ()
Shifting token ';' ()
Entering state 321
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 87
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 132
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 182
Next token is token ')' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 328
Next token is token ')' ()
Shifting token ')' ()
Entering state 332
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 177
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 258
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 87
Reading a token: Next token is token MODULO ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 88
Next token is token MODULO ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 91
Next token is token MODULO ()
Shifting token MODULO ()
Entering state 153
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 91 153
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 91 153
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 91 153
Entering state 87
Reading a token: Next token is token EQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 91 153
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 91 153
Entering state 234
Reducing stack by rule 38 (line 135):
   $1 = nterm multiplicative_expression ()
   $2 = token MODULO ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 91
Next token is token EQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 92
Next token is token EQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 93
Next token is token EQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 94
Next token is token EQ ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 95
Next token is token EQ ()
Shifting token EQ ()
Entering state 162
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 95 162
Entering state 243
Next token is token ')' ()
Reducing stack by rule 51 (line 174):
   $1 = nterm equality_expression ()
   $2 = token EQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 294
Next token is token ')' ()
Shifting token ')' ()
Entering state 314
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token CONTINUE ()
Shifting token CONTINUE ()
Entering state 176
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 257
Reducing stack by rule 197 (line 615):
   $1 = token CONTINUE ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 104
Entering state 194
Reducing stack by rule 175 (line 545):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 324
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 330
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token INCREMENT ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 87
Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 132
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 324 330
Entering state 334
Reducing stack by rule 188 (line 590):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 191
Reducing stack by rule 173 (line 541):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332
Entering state 336
Reducing stack by rule 193 (line 603):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm declaration ()
   $4 = nterm expression_opt ()
   $5 = token ';' ()
   $6 = nterm expression_opt ()
   $7 = token ')' ()
   $8 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 192
Reducing stack by rule 174 (line 543):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '(' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token '(' ()
Shifting token '(' ()
Entering state 134
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 228
Reducing stack by rule 17 (line 79):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 226
Next token is token ',' ()
Shifting token ',' ()
Entering state 284
Reading a token: Next token is token SIZEOF ()
Shifting token SIZEOF ()
Entering state 69
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 113
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69 113
Entering state 119
Next token is token ')' ()
Shifting token ')' ()
Entering state 212
Reducing stack by rule 7 (line 52):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284 69
Entering state 114
Reducing stack by rule 25 (line 99):
   $1 = token SIZEOF ()
   $2 = nterm unary_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 87 134 226 284
Entering state 308
Reducing stack by rule 18 (line 81):
   $1 = nterm argument_expression_list ()
   $2 = token ',' ()
   $3 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 226
Next token is token ')' ()
Reducing stack by rule 19 (line 86):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 57 104 187 87 134
Entering state 227
Next token is token ')' ()
Shifting token ')' ()
Entering state 285
Reducing stack by rule 10 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 109
Reading a token: Next token is token ']' ()
Reducing stack by rule 140 (line 434):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 57 104 187 56 39 61 109
Entering state 204
Next token is token ']' ()
Reducing stack by rule 142 (line 439):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 29 23 38 57 104 187 56 39 61 109 204
Entering state 274
Next token is token ']' ()
Shifting token ']' ()
Entering state 304
Reducing stack by rule 133 (line 418):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 84
Reading a token: Next token is token FLOAT_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 127
Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 127
Entering state 222
Reducing stack by rule 161 (line 504):
   $1 = nterm designation_opt ()
   $2 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token ',' ()
Shifting token ',' ()
Entering state 221
Reading a token: Next token is token MINUS ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221
Entering state 283
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 76
Reducing stack by rule 30 (line 113):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 89
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283 89
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283 89
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283 89
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283 89
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283 89
Entering state 150
Reducing stack by rule 24 (line 97):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 307
Reducing stack by rule 162 (line 506):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token ',' ()
Shifting token ',' ()
Entering state 221
Reading a token: Next token is token FLOAT_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221
Entering state 283
Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 307
Reducing stack by rule 162 (line 506):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token ',' ()
Shifting token ',' ()
Entering state 221
Reading a token: Next token is token FLOAT_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221
Entering state 283
Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 87
Reading a token: Next token is token ',' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 88
Next token is token ',' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 91
Next token is token ',' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 92
Next token is token ',' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 93
Next token is token ',' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 94
Next token is token ',' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 95
Next token is token ',' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 96
Next token is token ',' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 97
Next token is token ',' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 98
Next token is token ',' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 99
Next token is token ',' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 100
Next token is token ',' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 307
Reducing stack by rule 162 (line 506):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token ',' ()
Shifting token ',' ()
Entering state 221
Reading a token: Next token is token INTEGER_CONST ()
Reducing stack by rule 164 (line 512):
-> $$ = nterm designation_opt ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221
Entering state 283
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 87
Reading a token: Next token is token '}' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 88
Next token is token '}' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 91
Next token is token '}' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 92
Next token is token '}' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 93
Next token is token '}' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 94
Next token is token '}' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 95
Next token is token '}' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 96
Next token is token '}' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 97
Next token is token '}' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 98
Next token is token '}' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 99
Next token is token '}' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 100
Next token is token '}' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54 84 126 221 283
Entering state 307
Reducing stack by rule 162 (line 506):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designation_opt ()
   $4 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 57 104 187 56 68 54 84
Entering state 126
Next token is token '}' ()
Shifting token '}' ()
Entering state 220
Reducing stack by rule 159 (line 497):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Reading a token: Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 1
Reducing stack by rule 103 (line 329):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 173
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 254
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 173 254 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 87
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 88
Next token is token LT ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 91
Next token is token LT ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 92
Next token is token LT ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 93
Next token is token LT ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 94
Next token is token LT ()
Shifting token LT ()
Entering state 158
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 94 158
Entering state 239
Next token is token ';' ()
Reducing stack by rule 46 (line 161):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 311
Next token is token ';' ()
Shifting token ';' ()
Entering state 321
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 87
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 132
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 182
Next token is token ')' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 328
Next token is token ')' ()
Shifting token ')' ()
Entering state 332
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token ADD_ASGN ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 87
Next token is token ADD_ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 88
Next token is token ADD_ASGN ()
Shifting token ADD_ASGN ()
Entering state 138
Reducing stack by rule 71 (line 239):
   $1 = token ADD_ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88
Entering state 148
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332
Entering state 336
Reducing stack by rule 193 (line 603):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm declaration ()
   $4 = nterm expression_opt ()
   $5 = token ';' ()
   $6 = nterm expression_opt ()
   $7 = token ')' ()
   $8 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 192
Reducing stack by rule 174 (line 543):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token STATIC ()
Shifting token STATIC ()
Entering state 16
Reducing stack by rule 95 (line 310):
   $1 = token STATIC ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 24
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 3
Reducing stack by rule 99 (line 321):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187 24
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 24 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187 24
Entering state 41
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 24
Entering state 42
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 109
Reading a token: Next token is token ']' ()
Reducing stack by rule 140 (line 434):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 57 104 187 56 39 61 109
Entering state 204
Next token is token ']' ()
Reducing stack by rule 142 (line 439):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 29 23 38 57 104 187 56 39 61 109 204
Entering state 274
Next token is token ']' ()
Shifting token ']' ()
Entering state 304
Reducing stack by rule 133 (line 418):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 173
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 254
Reading a token: Next token is token REGISTER ()
Shifting token REGISTER ()
Entering state 17
Reducing stack by rule 97 (line 314):
   $1 = token REGISTER ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 24
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187 173 254 24
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 173 254 24 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187 173 254 24
Entering state 41
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 173 254 24
Entering state 42
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 173 254 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187 173 254
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 87
Reading a token: Next token is token NEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 88
Next token is token NEQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 91
Next token is token NEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 92
Next token is token NEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 93
Next token is token NEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 94
Next token is token NEQ ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 95
Next token is token NEQ ()
Shifting token NEQ ()
Entering state 163
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 95 163
Entering state 244
Next token is token ';' ()
Reducing stack by rule 52 (line 176):
   $1 = nterm equality_expression ()
   $2 = token NEQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290
Entering state 311
Next token is token ';' ()
Shifting token ';' ()
Entering state 321
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 87
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 132
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 182
Next token is token ')' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321
Entering state 328
Next token is token ')' ()
Shifting token ')' ()
Entering state 332
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 177
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 258
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 87
Reading a token: Next token is token LEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 88
Next token is token LEQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 91
Next token is token LEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 92
Next token is token LEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 93
Next token is token LEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 94
Next token is token LEQ ()
Shifting token LEQ ()
Entering state 160
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 87
Reading a token: Next token is token LOGICAL_AND ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 91
Next token is token LOGICAL_AND ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 92
Next token is token LOGICAL_AND ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 94 160
Entering state 241
Next token is token LOGICAL_AND ()
Reducing stack by rule 48 (line 165):
   $1 = nterm relational_expression ()
   $2 = token LEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 94
Next token is token LOGICAL_AND ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 95
Next token is token LOGICAL_AND ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 96
Next token is token LOGICAL_AND ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 97
Next token is token LOGICAL_AND ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 98
Next token is token LOGICAL_AND ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 99
Next token is token LOGICAL_AND ()
Shifting token LOGICAL_AND ()
Entering state 167
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 87
Reading a token: Next token is token GEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 91
Next token is token GEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 92
Next token is token GEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 93
Next token is token GEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 94
Next token is token GEQ ()
Shifting token GEQ ()
Entering state 161
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167 94 161
Entering state 242
Next token is token ')' ()
Reducing stack by rule 49 (line 167):
   $1 = nterm relational_expression ()
   $2 = token GEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 99 167
Entering state 248
Next token is token ')' ()
Reducing stack by rule 60 (line 204):
   $1 = nterm logical_AND_expression ()
   $2 = token LOGICAL_AND ()
   $3 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258
Entering state 294
Next token is token ')' ()
Shifting token ')' ()
Entering state 314
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '[' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 87
Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 87
Reading a token: Next token is token SUB_ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 88
Next token is token SUB_ASGN ()
Shifting token SUB_ASGN ()
Entering state 139
Reducing stack by rule 72 (line 241):
   $1 = token SUB_ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88
Entering state 148
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104 177 258 294 314
Entering state 324
Reading a token: Next token is token '}' ()
Reducing stack by rule 187 (line 588):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 191
Reducing stack by rule 173 (line 541):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 187
Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 173 254 290 311 321 328 332
Entering state 336
Reducing stack by rule 193 (line 603):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm declaration ()
   $4 = nterm expression_opt ()
   $5 = token ';' ()
   $6 = nterm expression_opt ()
   $7 = token ')' ()
   $8 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 192
Reducing stack by rule 174 (line 543):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token REGISTER ()
Shifting token REGISTER ()
Entering state 17
Reducing stack by rule 97 (line 314):
   $1 = token REGISTER ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 24
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 7
Reducing stack by rule 101 (line 325):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187 24
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 24 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187 24
Entering state 41
Reducing stack by rule 88 (line 289):
   $1 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 24
Entering state 42
Reducing stack by rule 84 (line 278):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 174
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 255
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 88
Next token is token ')' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255
Entering state 292
Next token is token ')' ()
Shifting token ')' ()
Entering state 313
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 177
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 258
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 87
Reading a token: Next token is token EQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 88
Next token is token EQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 91
Next token is token EQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 92
Next token is token EQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 93
Next token is token EQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 94
Next token is token EQ ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 95
Next token is token EQ ()
Shifting token EQ ()
Entering state 162
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 93
Next token is token ')' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 95 162
Entering state 243
Next token is token ')' ()
Reducing stack by rule 51 (line 174):
   $1 = nterm equality_expression ()
   $2 = token EQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 98
Next token is token ')' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258
Entering state 294
Next token is token ')' ()
Shifting token ')' ()
Entering state 314
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 104
Reading a token: Next token is token BREAK ()
Shifting token BREAK ()
Entering state 170
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 251
Reducing stack by rule 198 (line 617):
   $1 = token BREAK ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 104
Entering state 194
Reducing stack by rule 175 (line 545):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314
Entering state 324
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 330
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 177
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 258
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 87
Reading a token: Next token is token LEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 88
Next token is token LEQ ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 91
Next token is token LEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 92
Next token is token LEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 93
Next token is token LEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 94
Next token is token LEQ ()
Shifting token LEQ ()
Entering state 160
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 87
Reading a token: Next token is token LOGICAL_AND ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 91
Next token is token LOGICAL_AND ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 92
Next token is token LOGICAL_AND ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 94 160
Entering state 241
Next token is token LOGICAL_AND ()
Reducing stack by rule 48 (line 165):
   $1 = nterm relational_expression ()
   $2 = token LEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 94
Next token is token LOGICAL_AND ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 95
Next token is token LOGICAL_AND ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 96
Next token is token LOGICAL_AND ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 97
Next token is token LOGICAL_AND ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 98
Next token is token LOGICAL_AND ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 99
Next token is token LOGICAL_AND ()
Shifting token LOGICAL_AND ()
Entering state 167
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 87
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 87
Reading a token: Next token is token GEQ ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 91
Next token is token GEQ ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 92
Next token is token GEQ ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 93
Next token is token GEQ ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 94
Next token is token GEQ ()
Shifting token GEQ ()
Entering state 161
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 87
Reading a token: Next token is token ')' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 149
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 91
Next token is token ')' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 92
Next token is token ')' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167 94 161
Entering state 242
Next token is token ')' ()
Reducing stack by rule 49 (line 167):
   $1 = nterm relational_expression ()
   $2 = token GEQ ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 94
Next token is token ')' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 95
Next token is token ')' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 96
Next token is token ')' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 97
Next token is token ')' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 99 167
Entering state 248
Next token is token ')' ()
Reducing stack by rule 60 (line 204):
   $1 = nterm logical_AND_expression ()
   $2 = token LOGICAL_AND ()
   $3 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 99
Next token is token ')' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 100
Next token is token ')' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258
Entering state 294
Next token is token ')' ()
Shifting token ')' ()
Entering state 314
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '[' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 87
Next token is token '[' ()
Shifting token '[' ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 87
Reading a token: Next token is token ']' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 88
Next token is token ']' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 91
Next token is token ']' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 92
Next token is token ']' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 93
Next token is token ']' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 94
Next token is token ']' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 95
Next token is token ']' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 96
Next token is token ']' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 97
Next token is token ']' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 98
Next token is token ']' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 99
Next token is token ']' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 100
Next token is token ']' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 87 135
Entering state 229
Next token is token ']' ()
Shifting token ']' ()
Entering state 286
Reducing stack by rule 9 (line 60):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 87
Reading a token: Next token is token ADD_ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 88
Next token is token ADD_ASGN ()
Shifting token ADD_ASGN ()
Entering state 138
Reducing stack by rule 71 (line 239):
   $1 = token ADD_ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88
Entering state 148
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330 177 258 294 314
Entering state 324
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 187 (line 588):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330
Entering state 191
Reducing stack by rule 173 (line 541):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 177 258 294 314 324 330
Entering state 334
Reducing stack by rule 188 (line 590):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104
Entering state 191
Reducing stack by rule 173 (line 541):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104
Entering state 189
Reducing stack by rule 180 (line 564):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token INCREMENT ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 87
Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 132
Reducing stack by rule 13 (line 68):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104 187 174 255 292 313 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313
Entering state 186
Reducing stack by rule 171 (line 537):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 174 255 292 313
Entering state 323
Reducing stack by rule 190 (line 597):
   $1 = token WHILE ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 192
Reducing stack by rule 174 (line 543):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token GOTO ()
Shifting token GOTO ()
Entering state 175
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 256
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 293
Reducing stack by rule 196 (line 613):
   $1 = token GOTO ()
   $2 = token IDENTIFIER ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 194
Reducing stack by rule 175 (line 545):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 3
Reducing stack by rule 99 (line 321):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 57 104 187
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 290):
-> $$ = nterm declaration_specifiers_opt ()
Stack now 0 29 23 38 57 104 187 25
Entering state 43
Reducing stack by rule 85 (line 280):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers_opt ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 57 104 187
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 130 (line 410):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 131 (line 414):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 57 104 187 56 39
Entering state 61
Reading a token: Next token is token ASGN ()
Reducing stack by rule 128 (line 404):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 68
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 54
Reading a token: Next token is token CHAR_CONST ()
Shifting token CHAR_CONST ()
Entering state 72
Reducing stack by rule 3 (line 42):
   $1 = token CHAR_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 102
Reducing stack by rule 158 (line 495):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 57 104 187 56 68 54
Entering state 103
Reducing stack by rule 93 (line 303):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 57 104 187 56
Entering state 37
Reducing stack by rule 90 (line 294):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 57 104 187 56
Entering state 36
Next token is token ';' ()
Reducing stack by rule 82 (line 273):
   $1 = nterm init_declarator_list ()
-> $$ = nterm init_declarator_list_opt ()
Stack now 0 29 23 38 57 104 187 56
Entering state 35
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 81 (line 268):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list_opt ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 57 104 187
Entering state 183
Reducing stack by rule 184 (line 576):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token ':' ()
Shifting token ':' ()
Entering state 262
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 87
Next token is token '.' ()
Shifting token '.' ()
Entering state 136
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 230
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 87
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 181 262 88
Entering state 148
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 181 262 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187 181 262
Entering state 298
Reducing stack by rule 176 (line 550):
   $1 = token IDENTIFIER ()
   $2 = token ':' ()
   $3 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 185
Reducing stack by rule 170 (line 535):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token '.' ()
Shifting token '.' ()
Entering state 136
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 230
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token '.' ()
Shifting token '.' ()
Entering state 136
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 230
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token '.' ()
Shifting token '.' ()
Entering state 136
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 230
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 74
Reducing stack by rule 6 (line 50):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token '.' ()
Shifting token '.' ()
Entering state 136
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 230
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 181
Reading a token: Next token is token '.' ()
Reducing stack by rule 4 (line 46):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Next token is token '.' ()
Shifting token '.' ()
Entering state 136
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 230
Reducing stack by rule 11 (line 64):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 87
Reading a token: Next token is token ASGN ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 137
Reducing stack by rule 67 (line 231):
   $1 = token ASGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 57 104 187 88
Entering state 148
Reading a token: Next token is token FLOAT_CONST ()
Shifting token FLOAT_CONST ()
Entering state 73
Reducing stack by rule 2 (line 41):
   $1 = token FLOAT_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 88 148
Entering state 231
Reducing stack by rule 66 (line 225):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187
Entering state 193
Next token is token ';' ()
Shifting token ';' ()
Entering state 265
Reducing stack by rule 186 (line 583):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 190
Reducing stack by rule 172 (line 539):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 171
Reading a token: Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 71
Reducing stack by rule 1 (line 40):
   $1 = token INTEGER_CONST ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 57 104 187 171
Entering state 85
Reducing stack by rule 5 (line 48):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 86
Reducing stack by rule 8 (line 58):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 87
Reading a token: Next token is token ';' ()
Reducing stack by rule 21 (line 91):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 88
Next token is token ';' ()
Reducing stack by rule 33 (line 122):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 90
Reducing stack by rule 35 (line 129):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 91
Next token is token ';' ()
Reducing stack by rule 39 (line 141):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 92
Next token is token ';' ()
Reducing stack by rule 42 (line 150):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 93
Next token is token ';' ()
Reducing stack by rule 45 (line 159):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 94
Next token is token ';' ()
Reducing stack by rule 50 (line 172):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 95
Next token is token ';' ()
Reducing stack by rule 53 (line 181):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 96
Next token is token ';' ()
Reducing stack by rule 55 (line 188):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 97
Next token is token ';' ()
Reducing stack by rule 57 (line 195):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 98
Next token is token ';' ()
Reducing stack by rule 59 (line 202):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 99
Next token is token ';' ()
Reducing stack by rule 61 (line 209):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 100
Next token is token ';' ()
Reducing stack by rule 63 (line 216):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 101
Reducing stack by rule 65 (line 223):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 118
Reducing stack by rule 78 (line 256):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 57 104 187 171
Entering state 182
Next token is token ';' ()
Reducing stack by rule 194 (line 608):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 57 104 187 171
Entering state 252
Next token is token ';' ()
Shifting token ';' ()
Entering state 288
Reducing stack by rule 199 (line 619):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 57 104 187
Entering state 194
Reducing stack by rule 175 (line 545):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 57 104 187
Entering state 184
Reducing stack by rule 185 (line 578):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 57 104 187
Entering state 263
Reducing stack by rule 181 (line 566):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 57 104
Entering state 187
Reading a token: Next token is token '}' ()
Reducing stack by rule 182 (line 571):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 29 23 38 57 104
Entering state 188
Next token is token '}' ()
Shifting token '}' ()
Entering state 264
Reducing stack by rule 179 (line 559):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 57
Entering state 105
Reducing stack by rule 204 (line 638):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm declaration_list_opt ()
   $4 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0 29
Entering state 31
Reducing stack by rule 202 (line 631):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0 29
Entering state 47
Reducing stack by rule 201 (line 626):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 46
Stack now 0 29 46
Cleanup: popping token $end ()
Cleanup: popping nterm translation_unit ()
